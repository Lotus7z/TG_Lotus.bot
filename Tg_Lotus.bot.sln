using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace GeniusStartupBot
{
    class Program
    {
        private static readonly string BotToken = "7999727437:AAFWgt86p5ZzTCYSMy8tFKau9dKELuUW-_M";
        private static readonly TelegramBotClient BotClient = new TelegramBotClient(BotToken);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        private static readonly string[] Problems = {
            "–ª—é–¥–∏ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –Ω–æ—Å–∫–∏ –ø–æ —É—Ç—Ä–∞–º",
            "–∫–æ—Ñ–µ –æ—Å—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ",
            "–∫–æ—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç —Å–≤–æ–∏—Ö —Ö–æ–∑—è–µ–≤",
            "–ª—é–¥–∏ –±–æ—è—Ç—Å—è —Ç–µ–º–Ω–æ—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ",
            "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞",
            "–±–∞–Ω–∞–Ω—ã –±—ã—Å—Ç—Ä–æ –ø–æ—Ä—Ç—è—Ç—Å—è",
            "–ª—é–¥–∏ –∑–∞–±—ã–≤–∞—é—Ç, –∫–∞–∫ –¥—ã—à–∞—Ç—å –≤–æ —Å–Ω–µ",
            "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É –ø–∏–Ω–≥–≤–∏–Ω–æ–≤"
        };

        private static readonly string[] Solutions = {
            "—É–º–Ω—ã–µ –Ω–æ—Å–∫–∏ —Å GPS",
            "—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞ —Å –ò–ò",
            "—Ä–æ–±–æ—Ç-–∫–æ—Ç —Å –≥–æ–ª–æ—Å–æ–º –ú–æ—Ä–≥–∞–Ω–∞ –§—Ä–∏–º–µ–Ω–∞",
            "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å –Ω–æ—á–Ω–∏–∫–æ–º –∏ Spotify",
            "–Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞ —Ç–µ–±—è",
            "–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—ã–π —Å–ø—Ä–µ–π –¥–ª—è –±–∞–Ω–∞–Ω–æ–≤",
            "—É–º–Ω–∞—è –ø–æ–¥—É—à–∫–∞ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º",
            "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ø–∏–Ω–≥–≤–∏–Ω–æ–≤"
        };

        private static readonly string[] Monetizations = {
            "—Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ NFT-–Ω–æ—Å–æ–∫",
            "–∏ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–æ–º –∫ '–∏–¥–µ–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ'",
            "–∑–∞ $999 –≤ –º–µ—Å—è—Ü",
            "—á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É 'BananaCoin'",
            "—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º –≤ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π",
            "–∏ —Ñ—Ä–∞–Ω—à–∏–∑–æ–π –≤ –∫–∞–∂–¥–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—É",
            "—á–µ—Ä–µ–∑ –¥–æ–Ω–∞—Ç—ã –Ω–∞ Patreon '–î—ã—à–∏ —Å–æ –º–Ω–æ–π'",
            "—Å —Ä–µ–∫–ª–∞–º–æ–π –æ—Ç Coca-Cola –¥–ª—è –ø–∏–Ω–≥–≤–∏–Ω–æ–≤"
        };

        // –ù–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
        private static readonly string[] StartupNames = {
            "SockAI", "DarkFridge", "BananaShield", "PenguinLink", "Breathify", "CineMood", "NFT Socks", "MorganCat"
        };

        private static readonly string[] Slogans = {
            "Because your socks have feelings too.",
            "Your fridge sees you at 3 AM. And judges you.",
            "Bananas deserve a second chance.",
            "Dating for penguins. Finally.",
            "Breathe like Elon. Sleep like a rock.",
            "AI that picks your movie ‚Äî and your therapist."
        };

        private static readonly string[] InvestorReactions = {
            "ü§Ø –Ø –≤–∫–ª–∞–¥—ã–≤–∞—é $10–ú! –≠—Ç–æ –±—É–¥—É—â–µ–µ!",
            "üí∏ –ú–æ–π —Ñ–æ–Ω–¥ —É–∂–µ –≤ –¥–µ–ª–µ!",
            "ü§® –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –Ω–æ –≥–¥–µ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è?",
            "üôÑ –ï—â—ë –æ–¥–∏–Ω 'Uber for X'... –õ–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏ $500–∫.",
            "ü§¨ –í—ã–≥–æ–Ω–∏—Ç–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ Silicon Valley!",
            "üíÄ –≠—Ç–æ —Ö—É–∂–µ, —á–µ–º Juicero.",
            "ü§° –Ø –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª, –Ω–æ —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–º–∞—Ä—Ç—ã—à–µ–∫.",
            "üî• –≠—Ç–æ –ª–∏–±–æ Nobel Prize, –ª–∏–±–æ —Ç—é—Ä—å–º–∞. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º!"
        };

        private static readonly string[] MemeCaptions = {
            "–ö–æ–≥–¥–∞ —Ç–≤–æ–π —Å—Ç–∞—Ä—Ç–∞–ø –æ—Ü–µ–Ω–∏–ª–∏ –≤ $0, –Ω–æ —Ç—ã –≤—Å—ë –µ—â—ë –≤–µ—Ä–∏—à—å –≤ NFT-–Ω–æ—Å–∫–∏...",
            "–ú–æ–π –∏–Ω–≤–µ—Å—Ç–æ—Ä –ø–æ—Å–ª–µ –ø–∏—Ç—á–∞ '—É–º–Ω–æ–π –ø–æ–¥—É—à–∫–∏ —Å –¥—ã—Ö–∞–Ω–∏–µ–º':",
            "–ö–∞–∫ —è –≤—ã–≥–ª—è–∂—É, –∑–∞—â–∏—â–∞—è 'Coca-Cola –¥–ª—è –ø–∏–Ω–≥–≤–∏–Ω–æ–≤' –Ω–∞ Demo Day:",
            "TAM/SAM/SOM –º–æ–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞: TAM = 3 —á–µ–ª–æ–≤–µ–∫–∞, SAM = 1 (—è), SOM = 0",
            "–ö–æ–≥–¥–∞ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–π 'AI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞' ‚Äî —ç—Ç–æ `Math.random()`"
        };

        private static readonly Random Random = new();

        static async Task Main(string[] args)
        {
            try
            {
                var me = await BotClient.GetMeAsync();
                Console.WriteLine($"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.Username}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {ex.Message}");
                return;
            }

            var offset = 0;
            while (true)
            {
                try
                {
                    var updates = await BotClient.GetUpdatesAsync(offset, limit: 100, timeout: 30);
                    foreach (var update in updates)
                    {
                        await HandleUpdateAsync(update);
                        offset = update.Id + 1;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ex.Message}");
                    await Task.Delay(2000);
                }
            }
        }

        private static async Task HandleUpdateAsync(Update update)
        {
            if (update.Message?.Text is not string text)
                return;

            var chatId = update.Message.Chat.Id;
            string response = "";

            if (text.StartsWith("/start", StringComparison.OrdinalIgnoreCase))
            {
                response = "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ì–µ–Ω–∏–∞–ª—å–Ω—É—é –ò–¥–µ—é¬ª!\n\n" +
                           "–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ —Å–¥–µ–ª–∞—é—Ç —Ç–µ–±—è –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ.\n\n" +
                           "–ö–æ–º–∞–Ω–¥—ã:\n" +
                           "/idea ‚Äî –Ω–æ–≤–∞—è –∏–¥–∏–æ—Ç—Å–∫–∞—è –∏–¥–µ—è\n" +
                           "/pitch ‚Äî –ø–∏—Ç—á-–¥–µ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–∞\n" +
                           "/invest ‚Äî —Ä–µ–∞–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞\n" +
                           "/rate ‚Äî –æ—Ü–µ–Ω–∫–∞ –∏–¥–µ–∏\n" +
                           "/meme ‚Äî –º–µ–º –ø—Ä–æ —Å—Ç–∞—Ä—Ç–∞–ø\n" +
                           "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞";
            }
            else if (text.StartsWith("/help", StringComparison.OrdinalIgnoreCase))
            {
                response = "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n" +
                           "/idea ‚Äî üí° –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è (–∏–¥–∏–æ—Ç—Å–∫–∞—è) –∏–¥–µ—è\n" +
                           "/pitch ‚Äî üé§ –ø–∏—Ç—á-–¥–µ–∫\n" +
                           "/invest ‚Äî üí∞ —Ä–µ–∞–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞\n" +
                           "/rate ‚Äî üìä –æ—Ü–µ–Ω–∫–∞ (1‚Äì10)\n" +
                           "/meme ‚Äî ü§° —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞";
            }
            else if (text.StartsWith("/idea", StringComparison.OrdinalIgnoreCase))
            {
                response = GenerateIdea();
            }
            else if (text.StartsWith("/pitch", StringComparison.OrdinalIgnoreCase))
            {
                response = GeneratePitch();
            }
            else if (text.StartsWith("/invest", StringComparison.OrdinalIgnoreCase))
            {
                response = GenerateInvestorReaction();
            }
            else if (text.StartsWith("/rate", StringComparison.OrdinalIgnoreCase))
            {
                response = RateIdea();
            }
            else if (text.StartsWith("/meme", StringComparison.OrdinalIgnoreCase))
            {
                response = GenerateMemeCaption();
            }
            else
            {
                response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help";
            }

            await BotClient.SendTextMessageAsync(
    chatId: chatId,
    text: response,
    parseMode: ParseMode.Markdown
);
        }

        private static string GenerateIdea()
        {
            var problem = Problems[Random.Next(Problems.Length)];
            var solution = Solutions[Random.Next(Solutions.Length)];
            var monetization = Monetizations[Random.Next(Monetizations.Length)];

            return $"üí° –ü—Ä–æ–±–ª–µ–º–∞: {problem}.\n" +
                   $"üõ† –†–µ—à–µ–Ω–∏–µ: {solution}.\n" +
                   $"üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: {monetization}.\n\n" +
                   "üöÄ –≠—Ç–∞ –∏–¥–µ—è –ª–∏–±–æ —Å–¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ. –£–¥–∞—á–∏!";
        }

        private static string GeneratePitch()
        {
            var name = StartupNames[Random.Next(StartupNames.Length)];
            var slogan = Slogans[Random.Next(Slogans.Length)];
            var problem = Problems[Random.Next(Problems.Length)];
            var solution = Solutions[Random.Next(Solutions.Length)];

            var tam = Random.Next(10, 100) * 1_000_000; // TAM: $10M‚Äì$100M
            var sam = (int)(tam * Random.NextDouble() * 0.5);
            var som = (int)(sam * Random.NextDouble() * 0.3);

            return $"üé§ **–ü–ò–¢–ß-–î–ï–ö: {name}**\n\n" +
                   $"\"{slogan}\"\n\n" +
                   $"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n" +
                   $"–†–µ—à–µ–Ω–∏–µ: {solution}\n\n" +
                   $"üìà TAM: ${tam:N0}\n" +
                   $"üéØ SAM: ${sam:N0}\n" +
                   $"üíº SOM: ${som:N0}\n\n" +
                   $"üî• –ì–æ—Ç–æ–≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä? –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!";
        }

        private static string GenerateInvestorReaction()
        {
            return "üíº –†–µ–∞–∫—Ü–∏—è –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:\n\n" +
                   InvestorReactions[Random.Next(InvestorReactions.Length)];
        }

        private static string RateIdea()
        {
            var score = Random.Next(1, 11);
            string comment;

            if (score >= 9) comment = "–≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ! –ò–ª–∏ –±–µ–∑—É–º–∏–µ. –ò–ª–∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ.";
            else if (score >= 6) comment = "–° –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º... –µ—Å–ª–∏ –∑–∞–±—ã—Ç—å –ø—Ä–æ –ª–æ–≥–∏–∫—É.";
            else if (score >= 3) comment = "–•–º. –ú–æ–∂–µ—Ç, –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π?";
            else comment = "–≠—Ç–æ –Ω–µ –∏–¥–µ—è. –≠—Ç–æ –∫—Ä–∏–∫ –¥—É—à–∏.";

            return $"üìä –û—Ü–µ–Ω–∫–∞ –∏–¥–µ–∏: {score}/10\n\n{comment}";
        }

        private static string GenerateMemeCaption()
        {
            return "üñºÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:\n\n" +
                   $"\"{MemeCaptions[Random.Next(MemeCaptions.Length)]}\"";
        }
    }
}

